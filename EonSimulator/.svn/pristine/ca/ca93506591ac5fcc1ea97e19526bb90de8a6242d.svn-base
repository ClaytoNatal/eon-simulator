package br.ufpe.eonsimulator.rsa;

import br.ufpe.eonsimulator.domain.Connection;
import br.ufpe.eonsimulator.domain.OSNRUtils;
import br.ufpe.eonsimulator.domain.Route;
import br.ufpe.eonsimulator.domain.Simulation;
import br.ufpe.eonsimulator.modulation.IsModulationFormat;

public class RSAOrderingAlgorithm extends RSAAlgorithm {

	private class RSAOrderingWrapper extends RSAWrapper {

		public RSAOrderingWrapper(int index, boolean isPathValid,
				boolean isOSNRValid, Route route, double requiredOSNR) {
			super(index, isPathValid, isOSNRValid, route, requiredOSNR);
		}

		@Override
		protected int compareToOtherEquals(RSAWrapper other) {
			if (index < other.index) {
				return -1;
			} else if (index > other.index) {
				return 1;
			} else {
				return 0;
			}
		}

	}

	@Override
	protected RSAWrapper createRSAWrapper(int index, Route route,
			Simulation simulation, Connection connection,
			IsModulationFormat modulationFormat) {
		return new RSAOrderingWrapper(index, route.isPathValid(),
				OSNRUtils.isValidOSNR(simulation, connection, route,
						modulationFormat.getNSymbol()), route,
				connection.getRequiredOSNR());
	}

}
