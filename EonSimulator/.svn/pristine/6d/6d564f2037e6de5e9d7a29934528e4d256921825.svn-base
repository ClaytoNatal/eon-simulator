package br.ufpe.eonsimulator.routing;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import br.ufpe.eonsimulator.costFunctions.IsCostFunction;
import br.ufpe.eonsimulator.domain.Connection;
import br.ufpe.eonsimulator.domain.Path;
import br.ufpe.eonsimulator.domain.Route;
import br.ufpe.eonsimulator.domain.Topology;
import br.ufpe.simulator.messages.MessageUtils;

public abstract class IsRoutingAlgorithm {

	private static Logger logger = Logger.getLogger(IsRoutingAlgorithm.class);
	private static final String ROUTE_INFO = "route.info";
	private static final String ROUTE_INFO_INDEXS = "route.info.indexs";
	private static List<Path> found = new ArrayList<Path>();

	public List<Route> createRoutes(Connection connection, Topology topology,
			IsCostFunction costFunction) {
		List<Route> routes = getRoutes(connection, topology, costFunction);
		findOnFoundPath(routes);
		doLog(routes);
		return routes;
	}

	private void findOnFoundPath(List<Route> routes) {
		if (routes != null) {
			for (Route route : routes) {
				Path path = find(route.getPath());
				if (path == null) {
					found.add(route.getPath());
				} else {
					route.setPath(path);
				}
			}
		}
	}

	public static Path find(Path path) {
		Path foundPath = null;
		for (Path path2 : found) {
			if (path.equals(path2)) {
				foundPath = path2;
				break;
			}
		}
		return foundPath;
	}

	private void doLog(List<Route> routes) {
		if (routes != null) {
			if (logger.isInfoEnabled()) {
				logger.info(MessageUtils.createMessage(ROUTE_INFO));
			}
			for (Route route : routes) {
				if (logger.isInfoEnabled()) {
					logger.info(MessageUtils.createMessage(ROUTE_INFO_INDEXS,
							route.getSeparatedElementsIndex()));
				}
			}
		}
	}

	protected abstract List<Route> getRoutes(Connection connection,
			Topology topology, IsCostFunction costFunction);
}
