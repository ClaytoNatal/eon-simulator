package br.ufpe.eonsimulator.rsa;

import br.ufpe.eonsimulator.domain.Connection;
import br.ufpe.eonsimulator.domain.OSNRUtils;
import br.ufpe.eonsimulator.domain.Route;
import br.ufpe.eonsimulator.domain.Simulation;
import br.ufpe.eonsimulator.modulation.IsModulationFormat;

public class RSAMinHopMaxOSNRAlgorithm extends RSAAlgorithm {

	private class RSAMinHopMaxOSNRWrapper extends RSAWrapper {

		public RSAMinHopMaxOSNRWrapper(int index, boolean isPathValid,
				boolean isOSNRValid, Route route, double requiredOSNR) {
			super(index, isPathValid, isOSNRValid, route, requiredOSNR);
		}

		@Override
		protected int compareToOtherEquals(RSAWrapper other) {
			int thisHop = getRoute().getPath().getLinks().size();
			int otherHop = other.getRoute().getPath().getLinks().size();
			double thisOSNR = getRoute().getOSNR();
			double otherOSNR = other.getRoute().getOSNR();
			if (thisHop < otherHop) {
				return -1;
			} else if (thisHop > otherHop) {
				return 1;
			} else if (thisOSNR > otherOSNR) {
				return -1;
			} else if (thisOSNR < otherOSNR) {
				return 1;
			} else {
				return 0;
			}
		}

	}

	@Override
	protected RSAWrapper createRSAWrapper(int index, Route route,
			Simulation simulation, Connection connection,
			IsModulationFormat modulationFormat) {
		return new RSAMinHopMaxOSNRWrapper(index, route.isPathValid(),
				OSNRUtils.isValidOSNR(simulation, connection, route,
						modulationFormat.getNSymbol()), route,
				connection.getRequiredOSNR());
	}

}
