package br.ufpe.eonsimulator.domain;

import java.util.Properties;

import org.apache.log4j.Logger;

import br.ufpe.eonsimulator.costFunctions.CostFunctionFactory;
import br.ufpe.eonsimulator.modulation.ModulationFormatFactory;
import br.ufpe.eonsimulator.routing.RoutingAlgorithmFactory;
import br.ufpe.eonsimulator.routing.ordering.DefaultRouteOrderingAlgorithm;
import br.ufpe.eonsimulator.spectrumAssignment.SpectrumAssignmentFactory;
import br.ufpe.eonsimulator.trafficGenerators.TrafficGeneratorFactory;
import br.ufpe.simulator.messages.MessageUtils;
import br.ufpe.simulator.utils.ConvertUtils;
import br.ufpe.simulator.utils.PropertiesUtils;

public class SimulationFactory {

	private static Logger logger = Logger.getLogger(SimulationFactory.class);

	private static final String TOPOLOGY_PROPERTIES = "src/main/resources/topology.properties";
	private static final String SIMULATION_FACTORY_INFO = "simulation.factory.info";
	private static final String NUMBER_OF_ITERATIONS_KEY = "simulation.numberOfIterations";
	private static final String MAX_SIMULATIONTIME_KEY = "simulation.maxSimulationTime";
	private static final String CONNECTION_DEATHRATE_KEY = "simulation.parameters.deathRate";
	private static final String CONNECTION_ISCONNECTIONEXPANDIBLE_KEY = "simulation.parameters.isConnectionExpandible";
	private static final String CONNECTION_SLOTWIDTH_KEY = "simulation.parameters.slotWidth";
	private static final String CONNECTION_MAXSLOTEXPAND_KEY = "simulation.parameters.maxSlotExpand";
	private static final String CONNECTION_MINSLOTEXPAND_KEY = "simulation.parameters.minSlotExpand";
	private static final String CONNECTION_MINARRIVAL_KEY = "simulation.parameters.minArrivalTime";
	private static final String CONNECTION_MAXARRIVAL_KEY = "simulation.parameters.maxArrivalTime";
	private static final String CONNECTION_BER_KEY = "simulation.parameters.ber";
	private static final String GRAPH_POINTS_KEY = "simulation.parameters.graphPoints";

	public static Simulation createSimulation(Properties properties) {
		logger.info(MessageUtils.createMessage(SIMULATION_FACTORY_INFO));
		Simulation simulation = new Simulation();
		simulation.setIsAssignmentAlgorithm(SpectrumAssignmentFactory
				.createSpectrumAssignmentAlgorithm(properties));
		simulation.setIsRoutingAlgorithm(RoutingAlgorithmFactory
				.createRoutingAlgorithm(properties));
		simulation.setMaxNumberConnection(ConvertUtils
				.convertToInteger(properties
						.getProperty(NUMBER_OF_ITERATIONS_KEY)));
		simulation.setMaxSimulationTime(getMaxSimulationTime(properties));
		simulation.setCostFunction(CostFunctionFactory
				.createCostFunction(properties));
		simulation.setModulationFormats(ModulationFormatFactory
				.createModulationFormats(properties));
		simulation.setTrafficGenerator(TrafficGeneratorFactory
				.createTrafficGenerator(properties));
		simulation
				.setRouteOrderingAlgorithm(new DefaultRouteOrderingAlgorithm());
		SimulationParameters parameters = new SimulationParameters();
		parameters.setConnectionDeathRate(ConvertUtils
				.convertToDouble(properties
						.getProperty(CONNECTION_DEATHRATE_KEY)));
		parameters.setConnectionExpandible(ConvertUtils
				.convertToBoolean(properties
						.getProperty(CONNECTION_ISCONNECTIONEXPANDIBLE_KEY)));
		parameters.setConnectionSlotWidth(ConvertUtils
				.convertToDouble(properties
						.getProperty(CONNECTION_SLOTWIDTH_KEY)));
		parameters.setConnectionMaxSlotExpand(ConvertUtils
				.convertToInteger(properties
						.getProperty(CONNECTION_MAXSLOTEXPAND_KEY)));
		parameters.setConnectionMinSlotExpand(ConvertUtils
				.convertToInteger(properties
						.getProperty(CONNECTION_MINSLOTEXPAND_KEY)));
		parameters.setConnectionMaxArrival(ConvertUtils
				.convertToDouble(properties
						.getProperty(CONNECTION_MAXARRIVAL_KEY)));
		parameters.setConnectionMinArrival(ConvertUtils
				.convertToDouble(properties
						.getProperty(CONNECTION_MINARRIVAL_KEY)));
		parameters.setNumberGraphPoints(ConvertUtils
				.convertToInteger(properties.getProperty(GRAPH_POINTS_KEY)));
		parameters.setBer(ConvertUtils.convertToDouble(properties
				.getProperty(CONNECTION_BER_KEY)));
		simulation.setSimulationParams(parameters);
		Properties topologyProperties = PropertiesUtils
				.createPropertiesFromResource(TOPOLOGY_PROPERTIES);
		simulation.setTopology(TopologyFactory
				.createTopology(topologyProperties));
		return simulation;
	}

	private static double getMaxSimulationTime(Properties properties) {
		double maxSimulationTime = ConvertUtils.convertToDouble(properties
				.getProperty(MAX_SIMULATIONTIME_KEY));
		return maxSimulationTime > 0 ? maxSimulationTime : Double.MAX_VALUE;
	}
}
