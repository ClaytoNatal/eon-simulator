package br.ufpe.simulatorkernel.domain;

import java.util.ArrayList;
import java.util.List;

import br.ufpe.simulator.math.MathUtils;

public class SpanSet {

	private List<Span> spans;

	public SpanSet() {
		super();
		this.spans = new ArrayList<Span>();
	}

	public void setNoiseFigure(double noiseFigure) {
		for (Span span : spans) {
			span.setNoiseFigure(noiseFigure);
		}
	}

	public void createSpans(Span span, int numberOfSpans, double a) {
		double totalLoss = MathUtils.converdBToLinear(numberOfSpans
				* span.getDistance() * span.getFiber().getAlfadB());
		double g = MathUtils.raiz(
				totalLoss / (Math.pow(a, MathUtils.soma(numberOfSpans))),
				numberOfSpans);
		for (int i = 0; i < numberOfSpans; i++) {
			Span clone = span.clone();
			clone.getLineAmplifier().setG(Math.pow(a, i + 1) * g);
			spans.add(clone);
		}

	}

	public void createSpans(Span span, double lsTotal) {
		int numberOfSpans = (int) (lsTotal / span.getDistance());
		for (int i = 0; i < numberOfSpans; i++) {
			spans.add(span.clone());
		}

		double rest = (lsTotal % span.getDistance());
		if (rest != 0) {
			Span spanRest = span.clone();
			spanRest.getFiber().setLs(rest);
			spans.add(spanRest);
		}
	}

	public List<Span> getSpans() {
		return spans;
	}

	public void setSpans(List<Span> spans) {
		this.spans = spans;
	}

}
